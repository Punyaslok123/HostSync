const mongoose=require("mongoose");  // Importing mongoose, the library used to define schemas and models and interact with MongoDB.


//  Defining a new Mongoose schema named otpTokenSchema.

// ðŸ”¹ This schema describes how the OTP document will look inside the OtpToken collection.


//  email field will store the user's email address.

// ðŸ”¹ type: String â†’ it must be a string.

// ðŸ”¹ required: true â†’ must be provided; canâ€™t be empty.

// ðŸ”¹ unique: true â†’ only one OTP per email is allowed at a time (prevents multiple OTPs being saved for same email).

// ðŸ”¹ otp field will store the generated OTP code.

// ðŸ”¹ type: String â†’ storing OTP as a string (even if it's numeric like "849102").


// ðŸ”¹ expiresAt field will store the expiry time of the OTP (example: 5 minutes after it was created).

// ðŸ”¹ type: Date â†’ to store exact expiry timestamp.

// ðŸ”¹ Helps us check later: is the OTP still valid or expired?

// ðŸ”¹ userData will store the entire signup form data the user entered (e.g., name, password, phone).

// ðŸ”¹ You keep it here until OTP is verified. After that, youâ€™ll use it to create the real user in your main User model.
const otpTokenSchema=new mongoose.Schema({
    email : {
        type:String,
        required:true,
        unique:true,
    },

    otp: {
         type:String,
         required:true
    },
    expiresAt: {
        type:Date,
        required:true,
    },

    userData: {
         type:Object,
         required:true
    }

})

// ðŸ”¹ Exporting a Mongoose model named OtpToken, based on the schema.

// ðŸ”¹ You can now use this model to save(), find(), delete() OTP entries in your database.

module.exports=mongoose.model("OtpToken",otpTokenSchema);